/*
 * The Doomsday Engine Project -- libdeng2
 *
 * Copyright (c) 2004-2009 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LIBDENG2_FUNCTION_H
#define LIBDENG2_FUNCTION_H

#include "../ISerializable"
#include "../Counted"
#include "../String"
#include "../Compound"
#include "../Record"

#include <list>
#include <map>

namespace de
{
    class Statement;
    class Context;
    class Expression;
    class Value;
    class ArrayValue;

    /**
     * Callable set of statements ready for execution. The argument list defines what kind of
     * arguments can be passed to the function and what are the default values for
     * the arguments. Functions are reference-counted so that they exist as long as
     * other objects need them (FunctionStatement, FunctionValue).
     *
     * @ingroup script
     */
    class Function : public Counted, public ISerializable, OBSERVES(Record, Deletion)
    {
    public:
        /// An incorrect number of arguments is given in a function call. @ingroup errors
        DEFINE_ERROR(WrongArgumentsError);

        typedef std::list<String> Arguments;
        typedef std::map<String, Value*> Defaults;
        typedef std::list<const Value*> ArgumentValues;
        
    public:
        Function();
        
        /**
         * Constructor.
         *
         * @param args      Names of the function arguments.
         * @param defaults  Default values for some or all of the arguments.
         */
        Function(const Arguments& args, const Defaults& defaults);
        
        ~Function();

        /// Returns a human-readable representation of the function.
        String asText() const;
        
        Compound& compound() { return _compound; }

        const Compound& compound() const { return _compound; }

        Arguments& arguments() { return _arguments; }
        
        const Arguments& arguments() const { return _arguments; }

        Defaults& defaults() { return _defaults; }
        
        const Defaults& defaults() const { return _defaults; }
      
        /**
         * Maps a set of named and unnamed argument values to the list of values that
         * will be passed to the function. Default values will be used for any arguments
         * that have been given no value. No copies of any values are made.
         *
         * @param args    The array's first element must be a DictionaryValue containing 
         *                values for the named arguments of the call. The rest of the array
         *                are the unnamed arguments.
         * @param values  The resulting list of values to the passed to the function.
         *                The values are in the order the arguments have been declared in
         *                the function statement.
         */
        void mapArgumentValues(const ArrayValue& args, ArgumentValues& values) const;

        /**
         * Sets the global namespace of the function. This is the namespace 
         * where the function was initially created.
         */
        void setGlobals(Record* globals);

        /**
         * Returns the global namespace of the function.
         * Return @c NULL when the originating namespace has been deleted.
         */
        Record* globals() const;
        
        /**
         * Perform a native call of the function. 
         *
         * @param context  Execution context. Any results generated by a
         *                 native function are placed here.
         * @param args     Arguments to the function. The array's first element
         *                 is always a dictionary that contains the labeled values.
         *
         * @return @c false, if the context should proceed with the non-native
         *         function call by creating a new execution context and running
         *         the statements of the function there. @c true, if the 
         *         native call handles everything, including placing the 
         *         return value into the evaluator.
         */
        virtual bool callNative(Context& context, const ArgumentValues& args) const;
        
        // Implements ISerializable.
        void operator >> (Writer& to) const;
        void operator << (Reader& from);         
        
        // Observes Record deletion.
        void recordBeingDeleted(Record& record);
        
    private:
        /// Argument names.
        Arguments _arguments;

        /// The function owns the default values stored in the arguments list.
        Defaults _defaults;
        
        /// The statements of this function.
        Compound _compound;
        
        /// Namespace where the function was created. This global namespace is
        /// used always when executing the function, regardless of where the
        /// function is called.
        Record* _globals;
    };
}

#endif /* LIBDENG2_FUNCTION_H */
