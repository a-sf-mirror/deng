## Copyright (c) 2006 - 2008 Jamie Jones <jamie_jones_au@yahoo.com.au>
## Copyright (c) 2007 - 2008 Daniel Swanson <danij@dengine.net>
## Copyright (c) 2008 - 2009 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
##
## This file is licensed under the GNU GPLv3 or any later versions,
##
## the deng build scripts is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## the deng build scripts is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with the deng build scripts; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, 
## Boston, MA  02110-1301  USA
##
################################################################################
PROJECT(deng C CXX)
CMAKE_MINIMUM_REQUIRED (VERSION 2.4.5 FATAL_ERROR)
SET (BUILDSCRIPTSDATE "$LastChangedDate$")
SET(deng_VERSION_MAJOR 1)
SET(deng_VERSION_MINOR 9)
SET(deng_VERSION_PATCH 0)
SET(deng_VERSION_REVISION beta5)
SET(deng_VERSION "${deng_VERSION_MAJOR}.${deng_VERSION_MINOR}.${deng_VERSION_PATCH}.${deng_VERSION_REVISION}")
# where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/build/cmake")

################################################################################
######################## Additional Win32 Path Setup  ##########################
IF (WIN32)
    ## Cmake NEEDS UNIX style paths ie / not \
    ## We should really read these varibles from the path
    ## not hardcode them here
    SET(ENV{SDLDIR} "c:/sdk/sdl")
    SET(ENV{OPENALDIR} "c:/sdk/openal")
    SET(ENV{ZLIBDIR} "c:/sdk/zlib")
    SET(ENV{LIBPNGDIR} "c:/sdk/libpng")
    SET(ENV{DIRECTXDIR} "c:/sdk/dx8mgw")
    SET(ENV{LIBCURLDIR} "c:/sdk/libcurl")
    SET(ENV{EAXDIR} "c:/sdk/eax")
ENDIF (WIN32)

################################################################################
######################## Macros  ###############################################

MACRO(CREATE_MODULE_AT_ONCE_FILE _filename)
    FILE(WRITE ${_filename} "//autogenerated file\n")
    FOREACH (_current_FILE ${ARGN})
    FILE(APPEND ${_filename} "#include \"${_current_FILE}\"\n")
    ENDFOREACH (_current_FILE)
ENDMACRO(CREATE_MODULE_AT_ONCE_FILE _filename)


################################################################################
######################## Configure Build Options  ##############################
SET(BUILD_SHARED_LIBS ON) 
## Default Build type is None. Supported Build Types are:
##    * None (CMAKE_C_FLAGS) Cmake gcc default of $CFLAGS.
##    * Debug (CMAKE_C_FLAGS_DEBUG) Cmake gcc default of "-g"
##    * Release (CMAKE_C_FLAGS_RELEASE) Cmake gcc default of "-O3 -DNDEBUG"
##    * RelWithDebInfo (CMAKE_C_FLAGS_RELWITHDEBINFO) Cmake default of "-O2 -g"
##    * MinSizeRel (CMAKE_C_FLAGS_MINSIZEREL) Cmake default of "-Os -DNDEBUG"

OPTION (BUILDJDOOM "Optionally build the jDoom plugin. Default ON" ON)
OPTION (BUILDJHERETIC "Optionally build the jHeretic plugin. Default ON" ON)
OPTION (BUILDJHEXEN "Optionally build the jHexen plugin. Default ON" ON)
OPTION (BUILDJDOOM64 "Optionally build the jDoom64 plugin. Default OFF" OFF)
OPTION (BUILDWADMAPCONVERT "Optionally build the WAD Map Converter plugin. Default ON" ON)
OPTION (BUILDOPENAL "Optionally build the OpenAL plugin. Default OFF" OFF)
OPTION (BUILDDEDICATED "Build as a dedicated server. Default OFF" OFF)
OPTION (BUILDDOX "Build doxygen documentation. Default OFF" OFF)
OPTION (ENABLEMAO "Combine all source files in a module and build it at once. Default OFF" OFF)
OPTION (ENABLENETDEBUG "Turn on internal network debugging features. Default OFF" OFF)
OPTION (ENABLERANGECHECKING "Turn on internal range checking features. Default ON" ON)
OPTION (ENABLEPROFILE "Turn on internal profiling features. Default OFF" OFF)
OPTION (FINK "Build with FINK on OSX. Default OFF" OFF)

MARK_AS_ADVANCED (BUILDJDOOM64)
MARK_AS_ADVANCED (ENABLEMAO)
MARK_AS_ADVANCED (ENABLENETDEBUG)
MARK_AS_ADVANCED (ENABLEPROFILE)
#MARK_AS_ADVANCED (ENABLERANGECHECKING)
MARK_AS_ADVANCED (FINK)

IF (NOT APPLE AND FINK)
    MESSAGE( FATAL_ERROR
    "FINK build option is only available on OSX")
ENDIF (NOT APPLE AND FINK)


IF (${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    MESSAGE( FATAL_ERROR
    "In-tree Builds are NOT supported. cd ${CMAKE_SOURCE_DIR}/build and try again")
ENDIF (${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})

################################################################################
######################## Doomsday Paths  #######################################
## Default Install Prefix on Win32 is C:/Program Files/deng
## Default Install Prefix on *NIX is /usr/local
## Default Install Prefix on OSX is FIXME
## This is set by Cmake automagically in CMAKE_INSTALL_PREFIX

## Default *NIX paths
## /usr/local/bin           <- Doomsday binary
## /usr/local/lib           <- libdropengl, libjdoom etc
## /usr/local/share/${PROJECT_NAME} <- jPacks and other data


IF (UNIX)
	IF (NOT WIN32)
		IF (APPLE)
			SET (CMAKE_INSTALL_PREFIX .)
			SET (bindir ${CMAKE_INSTALL_PREFIX}/install)
			SET (libdir ${CMAKE_INSTALL_PREFIX}/install)
			SET (datadir ${CMAKE_INSTALL_PREFIX}/install)
			SET (mandir ${CMAKE_INSTALL_PREFIX}/install)
		ELSE (APPLE)

        ## Do an approximation of the autotools install options. Should make an
        ## easy transition for package maintainers (like me when I'm not hacking here)

        SET (bindir
        ${CMAKE_INSTALL_PREFIX}/bin
        CACHE
        PATH
        "install location for executables"
        )

        SET (libdir
        ${CMAKE_INSTALL_PREFIX}/lib
        CACHE
        PATH
        "install location for libraries"
        )

        SET (datadir
        ${CMAKE_INSTALL_PREFIX}/share/${PROJECT_NAME}
        CACHE
        PATH
        "install location for data files"
        )

        SET (mandir
        ${CMAKE_INSTALL_PREFIX}/share/man
        CACHE
        PATH
        "install location for man files"
        )

        ENDIF (APPLE)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

IF (WIN32)
        ## FIXME. Correct locations here for WIN32
        SET (bindir
        ${CMAKE_INSTALL_PREFIX}/bin
        CACHE
        PATH
        "install location for executables"
        )

        SET (libdir
        ${CMAKE_INSTALL_PREFIX}/lib
        CACHE
        PATH
        "install location for libraries"
        )

        SET (datadir
        ${CMAKE_INSTALL_PREFIX}
        CACHE
        PATH
        "install location for data files"
        )

ENDIF (WIN32)


## Where does it go on OSX ? FIXME
## Thess .pk3s is generated in the Generate.pk3 target.
SET (DENG_ENGINE_DATA ${CMAKE_CURRENT_BINARY_DIR}/doomsday.pk3 )
SET (DENG_ENGINE_DATA_DIR ${datadir}/data)

SET (DENG_JDOOM_DATA ${CMAKE_CURRENT_BINARY_DIR}/jdoom.pk3 )
SET (DENG_JDOOM_DATA_DIR ${DENG_ENGINE_DATA_DIR}/jdoom)

SET (DENG_JHERETIC_DATA ${CMAKE_CURRENT_BINARY_DIR}/jheretic.pk3 )
SET (DENG_JHERETIC_DATA_DIR ${DENG_ENGINE_DATA_DIR}/jheretic)

SET (DENG_JHEXEN_DATA ${CMAKE_CURRENT_BINARY_DIR}/jhexen.pk3 )
SET (DENG_JHEXEN_DATA_DIR ${DENG_ENGINE_DATA_DIR}/jhexen)

SET (DENG_JDOOM64_DATA ${CMAKE_CURRENT_BINARY_DIR}/jdoom64.pk3 )
SET (DENG_JDOOM64_DATA_DIR ${DENG_ENGINE_DATA_DIR}/jdoom64)


IF (UNIX)
    IF (NOT APPLE)
        IF (NOT WIN32)
            ADD_DEFINITIONS ('-DDENG_BASE_DIR="${datadir}/" ')
            ADD_DEFINITIONS ('-DDENG_LIBRARY_DIR="${libdir}/" ')
        ENDIF (NOT WIN32)
    ENDIF (NOT APPLE)
ENDIF (UNIX)
IF (APPLE)
    ADD_DEFINITIONS ('-DDENG_BASE_DIR="./" ')
    ADD_DEFINITIONS ('-DDENG_LIBRARY_DIR="./" ')
ENDIF (APPLE)

################################################################################
######################## Include Standard Cmake Helpers  #######################
IF (NOT BUILDDEDICATED)
    FIND_PACKAGE(OpenGL REQUIRED)
ENDIF (NOT BUILDDEDICATED)

FIND_PACKAGE(SDL REQUIRED)
##INCLUDE (${CMAKE_ROOT}/Modules/FindSDL.cmake)

IF (NOT BUILDDEDICATED)
    FIND_PACKAGE(SDL_mixer REQUIRED)
ENDIF (NOT BUILDDEDICATED)

FIND_PACKAGE(SDL_net REQUIRED)

FIND_PACKAGE(ZLIB REQUIRED)

FIND_PACKAGE(PNG REQUIRED)

FIND_PACKAGE(CURL REQUIRED)

FIND_PACKAGE(PythonInterp REQUIRED)

IF (UNIX)
    FIND_PACKAGE(Curses REQUIRED)
ENDIF (UNIX)

IF (WIN32)
    FIND_PACKAGE(EAX REQUIRED)
    FIND_PACKAGE(DIRECTX_DIRECTSOUND REQUIRED)
    FIND_PACKAGE(DIRECTX_DIRECTINPUT REQUIRED)
ENDIF (WIN32)

IF (NOT BUILDDEDICATED)
    IF (UNIX)
        IF (NOT APPLE)
            FIND_PACKAGE(X11 REQUIRED)
        ENDIF (NOT APPLE)
    ENDIF (UNIX)

    IF (BUILDOPENAL)
        FIND_PACKAGE(OpenAL REQUIRED)
    ENDIF (BUILDOPENAL)
ENDIF (NOT BUILDDEDICATED)

IF (UNIX)
    IF (NOT WIN32)
        INCLUDE (${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
        INCLUDE (${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

FIND_PACKAGE(Doxygen)

INCLUDE(TestBigEndian)

################################################################################
######################## Cpack - Generate packages and source tarballs  ########


SET(CMAKE_INSTALL_MFC_LIBRARIES 1)
INCLUDE(${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake)

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "The Doomsday Engine: for jDoom, jHeretic, jHexen")
SET(CPACK_PACKAGE_VENDOR "DaniJ, Skyjake, Yagisan")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/build/README")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/engine/doc/LICENSE")
SET(CPACK_PACKAGE_VERSION_MAJOR "${deng_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${deng_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${deng_VERSION_PATCH}.${deng_VERSION_REVISON}")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "deng-${deng_VERSION}")

IF(NOT DEFINED CPACK_SYSTEM_NAME)
    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
    IF(CMAKE_CL_64)
        SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
    ELSE(CMAKE_CL_64)
        SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
    ENDIF(CMAKE_CL_64)
ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)

SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")


IF(WIN32 AND NOT UNIX)
    # Win32 packaging setup (MSVC Built)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    SET(CPACK_PACKAGE_EXECUTABLES "doomsday.exe")
    SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} - The Doomsday Engine: for jDoom, jHeretic, jHexen")
    SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.doomsdayhq.com")
    SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.doomsdayhq.com")
    SET(CPACK_NSIS_CONTACT "deng-devel@lists.sourceforge.net")
    SET(CPACK_NSIS_MODIFY_PATH ON)

    ELSE(WIN32 AND NOT UNIX)
        IF (APPLE)
            # OSX packaging setup
        ELSE (APPLE)
            # *Nix packaging setup (Inc Cygwin/MinGw)
            SET(CPACK_SOURCE_STRIP_FILES "")
            SET(CPACK_PACKAGE_EXECUTABLES "doomsday")
        ENDIF (APPLE)
ENDIF(WIN32 AND NOT UNIX)
INCLUDE(${CMAKE_ROOT}/Modules/CPack.cmake)

################################################################################
######################## Set Common Definitions  ###############################
TEST_BIG_ENDIAN(ENDINESS)
IF (ENDINESS STREQUAL "big endian")
    ADD_DEFINITIONS (-D__BIG_ENDIAN__)
ENDIF (ENDINESS STREQUAL "big endian")

IF (FINK)
    ADD_DEFINITIONS (-DFINK)
# #fink has advised that this may be needed to fix linking errors on OSX
#   ADD_DEFINITIONS (-D__DARWIN_UNIX03)
ENDIF (FINK)

IF (NOT ENABLERANGECHECKING)
    ADD_DEFINITIONS (-DNORANGECHECKING)
ENDIF (NOT ENABLERANGECHECKING)

IF (CMAKE_BUILD_TYPE STREQUAL Debug)
    ADD_DEFINITIONS (-D_DEBUG )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Debug)

IF (ENABLENETDEBUG)
    ADD_DEFINITIONS (-D_NETDEBUG )
ENDIF (ENABLENETDEBUG)

IF (ENABLEPROFILE)
    ADD_DEFINITIONS (-DDD_PROFILE )
ENDIF (ENABLEPROFILE)

IF (APPLE)
	ADD_DEFINITIONS (-DNO_FIXED_ASM )
	SET (BUILDFIXEDASM OFF)
ELSE (APPLE)
	IF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	    IF (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	       	ADD_DEFINITIONS (-DGNU_X86_FIXED_ASM )
	       	SET (BUILDFIXEDASM ON)
	    ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	        ADD_DEFINITIONS (-DNO_FIXED_ASM )
	        SET (BUILDFIXEDASM OFF)
	    ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	ELSE (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	    ADD_DEFINITIONS (-DNO_FIXED_ASM )
	    SET (BUILDFIXEDASM OFF)
	ENDIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
ENDIF (APPLE)

## Apple also needs -DUNIX in places
IF (UNIX)
    IF (NOT WIN32)
        ADD_DEFINITIONS ( -DUNIX)
        SET (BUILDSYSTEM UNIX)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

## Are we on Solaris ?
IF(CMAKE_SYSTEM MATCHES "SunOS-*")
    ADD_DEFINITIONS ( -DSOLARIS)
ENDIF(CMAKE_SYSTEM MATCHES "SunOS-*")

IF (WIN32)
    ADD_DEFINITIONS ( -DWIN32 -D_USRDLL -D_WINDLL -D_WINDOWS )
    SET (BUILDSYSTEM WIN32)
    IF (MSVC)
        ADD_DEFINITIONS ( -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
        SET (BUILDSYSTEM WIN32-MSVC)
    ENDIF (MSVC)
    IF (MINGW)
        ADD_DEFINITIONS ( -DUNICODE)
        SET (BUILDSYSTEM WIN32-MINGW)
    ENDIF (MINGW)
ENDIF (WIN32)

IF (APPLE)
	ADD_DEFINITIONS ( -DMACOSX)
	SET (CMAKE_OSX_SYSROOT /Developer/SDKs/MacOSX10.4u.sdk)
	SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.4" )
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.4" )
	
	SET (BUILDSYSTEM MACOSX)

	## Add needed Compiler and Linker flags for OSX
	IF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

		SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flat_namespace" )
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${PNG_LIBRARY_STATIC} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${PNG_LIBRARY_STATIC} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${PNG_LIBRARY_STATIC} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} ${PNG_LIBRARY_STATIC} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} ${PNG_LIBRARY_STATIC} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL "${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )

	ENDIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
ENDIF (APPLE)

################################################################################
######################## Find Our Build Deps  ##################################
## Confirm we have OpenGL
IF (OPENGL_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** libGL not found. On Ubuntu install libgl1-mesa-dev. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (OPENGL_FOUND STREQUAL "NO")

## Confirm we have GLU
IF (OPENGL_GLU_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** libGLU not found. On Ubuntu install libglu1-mesa-dev. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (OPENGL_GLU_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${OPENGL_INCLUDE_DIR})


## Confirm we have SDL
IF (SDL_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL not found. On Ubuntu install libsdl1.2-dev. On Mac OSX install FIXME. On Windows/MSVC install SDL-devel-1.2.11-VC6.zip.")
    ENDIF (SDL_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDL_INCLUDE_DIR})

## Confirm we have SDL_mixer
IF (SDLMIXER_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL Mixer not found. On Ubuntu install libsdl-mixer1.2-dev. On Mac OSX install FIXME. On Windows/MSVC install SDL_mixer-devel-1.2.7-VC6.zip.")
    ENDIF (SDLMIXER_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDLMIXER_INCLUDE_DIR})

## Confirm we have SDL_net
IF (SDLNET_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL Net not found. On Ubuntu install libsdl-net1.2-dev. On Mac OSX install FIXME. On Windows/MSVC install SDL_net-devel-1.2.6-VC6.zip.")
ENDIF (SDLNET_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDLNET_INCLUDE_DIR})

## Confirm we have zlib
IF (NOT ZLIB_FOUND)
    MESSAGE (FATAL_ERROR "** zlib not found. On Ubuntu install zlib1g-dev. On Mac OSX install FIXME. On Windows install zlib123-dll.zip.")
ENDIF (NOT ZLIB_FOUND)
INCLUDE_DIRECTORIES (${ZLIB_INCLUDE_DIR})

## confirm we have libPNG.
IF (NOT PNG_FOUND)
    MESSAGE (FATAL_ERROR "** libpng not found. On Ubuntu install libpng-dev. On Mac OSX install FIXME. On Windows install libpng-1.2.8-lib.zip.")
ENDIF (NOT PNG_FOUND)
INCLUDE_DIRECTORIES (${PNG_INCLUDE_DIR})

## confirm we have libcurl.
IF (NOT CURL_FOUND)
    MESSAGE (FATAL_ERROR "** libcurl not found. On Ubuntu install libcurl3-gnutls-dev. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (NOT CURL_FOUND)
INCLUDE_DIRECTORIES (${CURL_INCLUDE_DIR})

## Confirm we have ncurses
IF (UNIX)
    IF (NOT CURSES_LIBRARIES)
        MESSAGE (FATAL_ERROR "** ncurses not found. On Ubuntu install libncurses5-dev. On Mac OSX install FIXME.")
    ENDIF (NOT CURSES_LIBRARIES)
    INCLUDE_DIRECTORIES (${CURSES_INCLUDE_DIR})
ENDIF (UNIX)

## Confirm we have X11
IF (UNIX)
    IF (NOT APPLE)
        IF (NOT X11_FOUND)
            MESSAGE (FATAL_ERROR "** X11 not found. On Ubuntu install libx11-dev, libxext-dev.")
        ENDIF (NOT X11_FOUND)
    INCLUDE_DIRECTORIES (${X11_INCLUDE_DIR})
    ENDIF (NOT APPLE)
ENDIF (UNIX)

## Confirm we have DirectX DirectInput
IF (WIN32)
    IF (NOT DIRECTX_DIRECTINPUT_FOUND)
    MESSAGE (FATAL_ERROR "** DirectX Direct Input not found. On Windows install dx9sdk.exe.")
    ENDIF (NOT DIRECTX_DIRECTINPUT_FOUND)
    INCLUDE_DIRECTORIES (${DIRECTX_DIRECTINPUT_INCLUDE_DIRS})

## Confirm we have DirectX DirectSound
    IF (NOT DIRECTX_DIRECTSOUND_FOUND)
    MESSAGE (FATAL_ERROR "** DirectX Direct Sound not found. On Windows install dx9sdk.exe.")
    ENDIF (NOT DIRECTX_DIRECTSOUND_FOUND)
    INCLUDE_DIRECTORIES (${DIRECTX_DIRECTSOUND_INCLUDE_DIRS})

## Confirm we have EAX
    IF (NOT EAX_FOUND)
    MESSAGE (FATAL_ERROR "** Creative EAX not found. On Windows instal FIXME")
    ENDIF (NOT EAX_FOUND)
    INCLUDE_DIRECTORIES (${EAX_INCLUDE_DIRS})

ENDIF (WIN32)

IF (BUILDOPENAL)
    ## Confirm we have OpenAL
    IF (NOT OPENAL_FOUND STREQUAL "YES")
        MESSAGE (FATAL_ERROR "** Openal not found. On Ubuntu install libopenal-dev. On Mac OSX install FIXME. On Windows install OpenAL11CoreSDK.exe.")
    ENDIF (NOT OPENAL_FOUND STREQUAL "YES")
    INCLUDE_DIRECTORIES (${OPENAL_INCLUDE_DIR})
ENDIF (BUILDOPENAL)

IF (UNIX)
    IF (NOT WIN32)
    ## Confirm we have dlopen
    CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DL)
        IF(HAVE_DL)
            CHECK_LIBRARY_EXISTS("dl" "dlopen" "" HAVE_LIB_DL)
            IF(NOT HAVE_LIB_DL)
				MESSAGE (FATAL_ERROR "** dlopen not found. On Ubuntu install libc6-dev. On Mac OSX install FIXME. On Windows install FIXME.")
            ENDIF(NOT HAVE_LIB_DL)
        ELSE(HAVE_DL)
			MESSAGE (FATAL_ERROR "** dlopen not found. On Ubuntu install libc6-dev. On Mac OSX install FIXME. On Windows install FIXME.")
        ENDIF(HAVE_DL)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

## confirm we have Python
IF (NOT PYTHONINTERP_FOUND)
    MESSAGE (FATAL_ERROR "** Python not found. On Ubuntu install python. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (NOT  PYTHONINTERP_FOUND)

## confirm we have Doxygen.
IF (NOT DOXYGEN)
    MESSAGE (STATUS "** Doxygen not found. On Ubuntu install doxygen. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (NOT DOXYGEN)

## confirm we have Graphviz.
IF (NOT DOT)
    MESSAGE (STATUS "** Graphviz not found. On Ubuntu install graphviz. On Mac OSX install FIXME. On Windows install FIXME.")
ENDIF (NOT DOT)

################################################################################
######################## External LZSS Files ###################################

IF (UNIX)
    INCLUDE_DIRECTORIES ( ${CMAKE_SOURCE_DIR}/external/lzss/portable/include )
    FILE (GLOB LZSS_SOURCES ${CMAKE_SOURCE_DIR}/external/lzss/unix/src/*.c )
ENDIF (UNIX)

IF (WIN32 AND NOT UNIX)
    INCLUDE_DIRECTORIES ( ${CMAKE_SOURCE_DIR}/external/lzss/win32/include )
    FILE (GLOB LZSS_SOURCES ${CMAKE_SOURCE_DIR}/external/lzss/win32/src/*.c )
ENDIF (WIN32 AND NOT UNIX)
################################################################################
######################## The Doomsday Engine  ##################################
ADD_DEFINITIONS (-D__DOOMSDAY__ )

INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/api ${CMAKE_SOURCE_DIR}/engine/portable/include )

FILE (GLOB DENG_PORTABLE_SOURCES ${CMAKE_SOURCE_DIR}/engine/portable/src/*.c )

SET ( DENG_PORTABLE_SOURCES ${DENG_PORTABLE_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/common/src/m_fixed.c )

IF (UNIX)
    IF (NOT WIN32)
        INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/unix/include )
	FILE (GLOB DENG_ARCH_SPECIFIC_SOURCES ${CMAKE_SOURCE_DIR}/engine/unix/src/*.c )
        SET (DENG_ARCH_SPECIFIC_SOURCES ${DENG_ARCH_SPECIFIC_SOURCES} ${LZSS_SOURCES})
        #IF (NOT APPLE)
        #    SET (DENG_ARCH_SPECIFIC_SOURCES ${DENG_ARCH_SPECIFIC_SOURCES}
        #        ${CMAKE_SOURCE_DIR}/engine/unix/src/sys_window.c)
        #ENDIF (NOT APPLE)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

IF (WIN32)
    INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/win32/include )
    SET (DENG_ARCH_SPECIFIC_SOURCES
         ${CMAKE_SOURCE_DIR}/engine/win32/src/dd_winit.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_cdaudio.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_console.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_findfile.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_input.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_mixer.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_musd_win.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_sfxd_ds.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_sfxd_loader.c
         ${CMAKE_SOURCE_DIR}/engine/win32/src/sys_window.c
         ${LZSS_SOURCES})
ENDIF (WIN32)

## .m is Obj-C
IF (APPLE)
	INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/mac/include )
	FILE (GLOB DENG_OSX_SOURCES 
        ${CMAKE_SOURCE_DIR}/engine/mac/src/*.m 
        ${CMAKE_SOURCE_DIR}/engine/mac/src/*.c )
	SET (DENG_ARCH_SPECIFIC_SOURCES ${DENG_ARCH_SPECIFIC_SOURCES} ${DENG_OSX_SOURCES})
ENDIF (APPLE)

IF (COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
ENDIF (COMMAND cmake_policy)

ADD_EXECUTABLE (doomsday ${DENG_PORTABLE_SOURCES} ${DENG_ARCH_SPECIFIC_SOURCES})

TARGET_LINK_LIBRARIES (doomsday ${SDL_LIBRARY} ${SDLMIXER_LIBRARY} ${SDLNET_LIBRARY} ${ZLIB_LIBRARIES} ${CURSES_LIBRARIES} ${PNG_LIBRARIES} ${CURL_LIBRARIES} ${OPENGL_LIBRARIES})

IF (UNIX)
    IF (NOT WIN32)
        TARGET_LINK_LIBRARIES (doomsday dl)
            IF (NOT APPLE)
                TARGET_LINK_LIBRARIES (doomsday  ${X11_LIBRARIES})
            ENDIF (NOT APPLE)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

IF (WIN32)
    TARGET_LINK_LIBRARIES (doomsday wsock32 winmm gdi32 ole32 user32 ${EAX_LIBRARIES} ${DIRECTX_DIRECTSOUND_LIBRARIES} ${DIRECTX_DIRECTINPUT_LIBRARIES} )
ENDIF (WIN32)

## Work around for Win32 wanting something for the plugins to link to
#IF (WIN32)
#   ADD_LIBRARY (deng STATIC ${DENG_SOURCES} engine/api/doomsday.def)
#   TARGET_LINK_LIBRARIES (deng ${SDL_LIBRARY} ${SDLNET_LIBRARY} ${ZLIB_LIBRARIES} ${CURSES_LIBRARIES} ${PNG_LIBRARIES} wsock32 winmm gdi32 ole32 user32
#   ${CMAKE_SOURCE_DIR}/external/lzss/win32/lzss )
#ENDIF (WIN32)

################################################################################
######################## Dehacked Reader Plugin  ###############################
ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/dehread )
################################################################################
######################## WAD Map Converter Plugin  #############################
IF (BUILDWADMAPCONVERT)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/wadmapconverter )
ENDIF (BUILDWADMAPCONVERT)
################################################################################
######################## OpenAL Output Plugin  #################################
IF (BUILDOPENAL)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/openal )
ENDIF (BUILDOPENAL)
################################################################################
######################## jDoom Game Plugin  ####################################
IF (BUILDJDOOM)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jdoom )
ENDIF (BUILDJDOOM)
################################################################################
######################## jHeretic Game Plugin  #################################
IF (BUILDJHERETIC)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jheretic )
ENDIF (BUILDJHERETIC)
################################################################################
######################## jHexen Game Plugin  ###################################
IF (BUILDJHEXEN)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jhexen )
ENDIF (BUILDJHEXEN)
################################################################################
######################## jDoom64 Game Plugin  #################################
IF (BUILDJDOOM64)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jdoom64 )
ENDIF (BUILDJDOOM64)
################################################################################
######################## Doxygenate All Source  ################################
## This target mixes all the documentation together. It's sometimes useful,
## but the 3 seperate functionaliy targets are better in most cases.
## In other words, don't build this, if you build the 3 other Doxygenate targets
IF (BUILDDOX)
    IF (DOXYGEN)
        IF (DOT)
            ADD_CUSTOM_TARGET (Doxygenate.all ALL doxygen
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
        ENDIF (DOT)
    ENDIF (DOXYGEN)
ENDIF (BUILDDOX)
################################################################################
######################## Generate pk3s ##########################################
ADD_CUSTOM_TARGET (Generate.pk3  ALL ${PYTHON_EXECUTABLE} ./packres.py ${CMAKE_CURRENT_BINARY_DIR}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build/scripts/ )
################################################################################
######################## Show Build Details  ###################################
MESSAGE( STATUS "BUILDSCRIPTSDATE:             " ${BUILDSCRIPTSDATE} )
MESSAGE( STATUS "CMAKE_SYSTEM:                 " ${CMAKE_SYSTEM} )
MESSAGE( STATUS "CMAKE_SYSTEM_PROCESSOR:       " ${CMAKE_SYSTEM_PROCESSOR} )
MESSAGE( STATUS "CMAKE_BUILD_TYPE:             " ${CMAKE_BUILD_TYPE} )
IF (CMAKE_BUILD_TYPE STREQUAL "")
    MESSAGE( STATUS "CMAKE_C_FLAGS:                " ${CMAKE_C_FLAGS} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL "")
IF (CMAKE_BUILD_TYPE STREQUAL Debug)
    MESSAGE( STATUS "CMAKE_C_FLAGS_DEBUG:          " ${CMAKE_C_FLAGS_DEBUG} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Debug)
IF (CMAKE_BUILD_TYPE STREQUAL Release)
    MESSAGE( STATUS "CMAKE_C_FLAGS_RELEASE:        " ${CMAKE_C_FLAGS_RELEASE} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Release)
IF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
    MESSAGE( STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO: " ${CMAKE_C_FLAGS_RELWITHDEBINFO} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
IF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
    MESSAGE( STATUS "CMAKE_C_FLAGS_MINSIZEREL:     " ${CMAKE_C_FLAGS_MINSIZEREL} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
MESSAGE( STATUS "CMAKE_C_COMPILER:             " ${CMAKE_C_COMPILER} )
MESSAGE( STATUS "CMAKE_SOURCE_DIR:             " ${CMAKE_SOURCE_DIR} )
MESSAGE( STATUS "CMAKE_BINARY_DIR:             " ${CMAKE_BINARY_DIR} )
MESSAGE( STATUS "BUILDJDOOM:                   " ${BUILDJDOOM} )
MESSAGE( STATUS "BUILDJHERETIC:                " ${BUILDJHERETIC} )
MESSAGE( STATUS "BUILDJHEXEN:                  " ${BUILDJHEXEN} )
MESSAGE( STATUS "BUILDJDOOM64:                 " ${BUILDJDOOM64} )
MESSAGE( STATUS "BUILDWADMAPCONVERT:           " ${BUILDWADMAPCONVERT} )
MESSAGE( STATUS "BUILDOPENAL:                  " ${BUILDOPENAL} )
MESSAGE( STATUS "BUILDDEDICATED:               " ${BUILDDEDICATED} )
MESSAGE( STATUS "BUILDDOX:                     " ${BUILDDOX} )
MESSAGE( STATUS "BUILDFIXEDASM:                " ${BUILDFIXEDASM} )
MESSAGE( STATUS "BUILDSYSTEM:                  " ${BUILDSYSTEM} )
MESSAGE( STATUS "CMAKE_INSTALL_PREFIX          " ${CMAKE_INSTALL_PREFIX} )
MESSAGE( STATUS "DENG_BASE_DIR                 " ${datadir} )
MESSAGE( STATUS "DENG_LIBRARY_DIR              " ${libdir} )
MESSAGE( STATUS "DENG_BINARY_DIR               " ${bindir} )
MESSAGE( STATUS "DENG_ENGINE_DATA_DIR          " ${DENG_ENGINE_DATA_DIR} )
MESSAGE( STATUS "DENG_JDOOM_DATA_DIR           " ${DENG_JDOOM_DATA_DIR} )
MESSAGE( STATUS "DENG_JHERETIC_DATA_DIR        " ${DENG_JHERETIC_DATA_DIR} )
MESSAGE( STATUS "DENG_JHEXEN_DATA_DIR          " ${DENG_JHEXEN_DATA_DIR} )
MESSAGE( STATUS "DENG_JDOOM64_DATA_DIR         " ${DENG_JDOOM64_DATA_DIR} )
################################################################################
######################## Install Targets  ######################################
INSTALL(TARGETS doomsday
RUNTIME DESTINATION ${bindir} 
LIBRARY DESTINATION ${libdir} )
INSTALL(FILES ${DENG_ENGINE_DATA} DESTINATION ${DENG_ENGINE_DATA_DIR} )

IF (APPLE)
    # Bundling.
    SET (BUNDLE_BASE Doomsday)
    SET (BUNDLE ${CMAKE_BINARY_DIR}/${BUNDLE_BASE}.app)
    ADD_CUSTOM_COMMAND( TARGET doomsday POST_BUILD
        COMMAND rm -rf ${BUNDLE}
        COMMAND mkdir -p ${BUNDLE}/Contents/MacOS
        COMMAND cp doomsday ${BUNDLE}/Contents/MacOS/${BUNDLE_BASE}
        COMMAND cp ${CMAKE_SOURCE_DIR}/build/mac/Info.plist ${BUNDLE}/Contents/Info.plist
        COMMAND echo 'APPL????' > ${BUNDLE}/Contents/PkgInfo
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/English.lproj
        COMMAND cp -r ${CMAKE_SOURCE_DIR}/engine/mac/res/English.lproj ${BUNDLE}/Contents/Resources
        COMMAND cp ${CMAKE_SOURCE_DIR}/engine/mac/res/deng.icns ${BUNDLE}/Contents/Resources/
        COMMAND cp -r ${CMAKE_SOURCE_DIR}/engine/mac/res/Startup.nib ${BUNDLE}/Contents/Resources/

        # Copy frameworks.
        COMMAND mkdir -p ${BUNDLE}/Contents/Frameworks
        COMMAND cp -R $ENV{HOME}/Library/Frameworks/{SDL,SDL_mixer,SDL_net}.framework ${BUNDLE}/Contents/Frameworks

        # Copy PK3s.
        COMMAND cp doomsday.pk3 ${BUNDLE}/Contents/Resources/
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/Data/
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/Data/Graphics/
        COMMAND cp ${CMAKE_SOURCE_DIR}/engine/data/graphics/loading{1,2}.png ${BUNDLE}/Contents/Resources/Data/Graphics/
        )
ENDIF (APPLE)

IF (BUILDJDOOM)
    INSTALL(FILES ${DENG_JDOOM_DATA} DESTINATION ${DENG_JDOOM_DATA_DIR} )
ENDIF (BUILDJDOOM)

IF (BUILDJHERETIC)
    INSTALL(FILES ${DENG_JHERETIC_DATA} DESTINATION ${DENG_JHERETIC_DATA_DIR} )
ENDIF (BUILDJHERETIC)

IF (BUILDJHEXEN)
    INSTALL(FILES ${DENG_JHEXEN_DATA} DESTINATION ${DENG_JHEXEN_DATA_DIR} )
ENDIF (BUILDJHEXEN)

IF (BUILDJDOOM64)
    INSTALL(FILES ${DENG_JDOOM64_DATA} DESTINATION ${DENG_JDOOM64_DATA_DIR} )
ENDIF (BUILDJDOOM64)
